{% comment %}
  Se√ß√£o "Compre Junto" que exibe o produto principal e produtos sugeridos (baseados em tags "buy:").
  Usa um √∫nico formul√°rio HTML para adicionar todos os itens ao carrinho com um √∫nico bot√£o.
{% endcomment %}

{% assign has_buy_tags = false %}
{% for tag in product.tags %}
  {% if tag contains 'buy:' %}
    {% assign has_buy_tags = true %}
    {% break %}
  {% endif %}
{% endfor %}

{% if has_buy_tags %}
  <section class="buy-together page-width">
    <h2>Frequentemente Comprados Juntos</h2>
    <product-form class="product Nawaz-form">
      <form
        action="/cart/add"
        method="post"
        id="buy-together-form"
        class="shopify-product-form"
        enctype="multipart/form-data"
        novalidate="novalidate"
        data-type="add-to-cart-form"
      >
        <div class="suggested-products">
          {% comment %} Exibir o produto principal {% endcomment %}
          {% if product %}
            <div class="suggested-product">
              <img
                src="{{ product.featured_image | image_url: width: 200 }}"
                alt="{{ product.title }}"
                width="auto"
                height="auto"
              >
              <h3>{{ product.title }}</h3>
              <span class="product-price">{{ product.selected_or_first_available_variant.price | money }}</span>
              <div
                data-product="{{ product | json | escape }}"
                data-product-id="{{ product.id }}"
                class="product-form__options"
              >
                <input
                  type="hidden"
                  name="items[0][id]"
                  class="product-variant-id"
                  value="{{ product.selected_or_first_available_variant.id }}"
                  {% if product.selected_or_first_available_variant.available == false %}
                    disabled
                  {% endif %}
                >
                <input type="hidden" name="items[0][quantity]" value="1">
                {% for option in product.options_with_values %}
                  <div class="product-form__option">
                    <label for="Option-main-{{ product.id }}-{{ forloop.index0 }}">{{ option.name }}</label>
                    <select
                      id="Option-main-{{ product.id }}-{{ forloop.index0 }}"
                      name="options[{{ option.name | escape }}]"
                      class="product-form__select"
                      data-product-id="{{ product.id }}"
                    >
                      {% for value in option.values %}
                        <option
                          value="{{ value | escape }}"
                          {% if option.selected_value == value %}
                            selected
                          {% endif %}
                        >
                          {{ value }}
                        </option>
                      {% endfor %}
                    </select>
                  </div>
                {% endfor %}
              </div>
            </div>
          {% endif %}

          {% comment %} Exibir produtos sugeridos com sinal de "+" entre eles {% endcomment %}
          {% assign item_index = 1 %}
          {% for tag in product.tags %}
            {% assign check_aray = tag | split: 'buy:' %}
            {% if check_aray[0] == blank and check_aray[1] != blank %}
              {% assign suggested_handle = check_aray[1] | strip %}
              {% assign suggested_product = all_products[suggested_handle] %}
              {% if suggested_product %}
                {% if item_index > 0 %}
                  <span class="plus-sign">+</span>
                {% endif %}
                <div class="suggested-product">
                  <a href="{{ suggested_product.url }}" class="link-custom">
                    <img
                      src="{{ suggested_product.featured_image | image_url: width: 200 }}"
                      alt="{{ suggested_product.title }}"
                      width="auto"
                      height="auto"
                    >

                    <h3>{{ suggested_product.title }}</h3>
                  </a>
                  <span class="product-price">
                    {{- suggested_product.selected_or_first_available_variant.price | money -}}
                  </span>
                  <div
                    data-product="{{ suggested_product | json | escape }}"
                    data-product-id="{{ suggested_product.id }}"
                    class="product-form__options"
                  >
                    <input
                      type="hidden"
                      name="items[{{ item_index }}][id]"
                      class="product-variant-id"
                      value="{{ suggested_product.selected_or_first_available_variant.id }}"
                      {% if suggested_product.selected_or_first_available_variant.available == false %}
                        disabled
                      {% endif %}
                    >
                    <input type="hidden" name="items[{{ item_index }}][quantity]" value="1">
                    {% for option in suggested_product.options_with_values %}
                      <div class="product-form__option">
                        <label for="Option-{{ suggested_product.id }}-{{ forloop.index0 }}">{{ option.name }}</label>
                        <select
                          id="Option-{{ suggested_product.id }}-{{ forloop.index0 }}"
                          name="options[{{ option.name | escape }}]"
                          class="product-form__select"
                          data-product-id="{{ suggested_product.id }}"
                        >
                          {% for value in option.values %}
                            <option
                              value="{{ value | escape }}"
                              {% if option.selected_value == value %}
                                selected
                              {% endif %}
                            >
                              {{ value }}
                            </option>
                          {% endfor %}
                        </select>
                      </div>
                    {% endfor %}
                  </div>
                </div>
                {% assign item_index = item_index | plus: 1 %}
              {% endif %}
            {% endif %}
          {% endfor %}
        </div>

        {% comment %} Total e Bot√£o √∫nico para adicionar todos os itens {% endcomment %}
        <div class="product-form__buttons">
          <div class="total-price-wrapper"><span>Total: </span><span class="total-price"></span></div>
          <button
            type="submit"
            name="add"
            class="product-form__submit button button--full-width button--primary"
            {% if product == blank or product.selected_or_first_available_variant.available == false %}
              disabled
            {% endif %}
          >
            <span>{{ 'products.product.add_to_cart' | t }}</span>
            {%- render 'loading-spinner' -%}
          </button>
        </div>
      </form>
    </product-form>
  </section>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('#buy-together-form');
    if (!form) return;

    const submitButton = form.querySelector('.product-form__submit');
    const productContainers = form.querySelectorAll('.suggested-product');
    const totalPriceElement = form.querySelector('.total-price');

    // üíµ Formatar o valor (ajuste conforme o seu tema)
    function formatMoney(cents) {
      const dollars = cents / 100;
      return 'R$ ' + dollars.toFixed(2); // Ajuste para reais se precisar
    }

    // üîÅ Atualizar variantes, pre√ßos e estado do bot√£o
    function updateVariants() {
      let allAvailable = true;
      let totalPrice = 0;

      productContainers.forEach(container => {
        const productData = JSON.parse(container.querySelector('[data-product]').dataset.product);
        const selects = container.querySelectorAll('.product-form__select');
        const variantInput = container.querySelector('.product-variant-id');
        const priceElement = container.querySelector('.product-price');

        const selectedOptions = Array.from(selects).map(select => select.value);
        const variant = productData.variants.find(v =>
          v.options.every((opt, index) => opt === selectedOptions[index])
        );

        if (variant) {
          variantInput.value = variant.id;
          variantInput.disabled = !variant.available;
          if (variant.available) {
            totalPrice += variant.price;
            priceElement.textContent = formatMoney(variant.price);
          } else {
            allAvailable = false;
            priceElement.textContent = 'Indispon√≠vel';
          }
        } else {
          variantInput.disabled = true;
          allAvailable = false;
          priceElement.textContent = 'Variante n√£o encontrada';
        }
      });

      if (totalPriceElement) totalPriceElement.textContent = formatMoney(totalPrice);

      submitButton.disabled = !allAvailable;
      submitButton.querySelector('span').textContent = allAvailable
        ? submitButton.dataset.textAdd || 'Adicionar ao carrinho'
        : submitButton.dataset.textUnavailable || 'Indispon√≠vel';
    }

    // Atualizar variantes ao mudar sele√ß√µes
    productContainers.forEach(container => {
      const selects = container.querySelectorAll('.product-form__select');
      selects.forEach(select => select.addEventListener('change', updateVariants));
    });

    // üõí Interceptar envio do formul√°rio
    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      submitButton.disabled = true;
      submitButton.querySelector('span').textContent = 'Adicionando...';

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          body: new FormData(form),
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        if (!response.ok) throw new Error('Erro ao adicionar ao carrinho');

        // üîÑ Atualiza dados do carrinho
        const cartData = await fetch('/cart.js').then(res => res.json());

        // üîÑ Buscar HTML das se√ß√µes atualizadas
        const sectionsResponse = await fetch('?sections=cart-drawer,cart-icon-bubble');
        const sectionsData = await sectionsResponse.json();

        // ‚ú® Atualizar o cart drawer
        const cartDrawer = document.querySelector('cart-drawer');
        if (cartDrawer) {
          cartDrawer.renderContents({
            id: cartData.id,
            sections: sectionsData
          });

          // üßπ Remove a classe is-empty se houver itens
          setTimeout(() => {
            const drawer = document.querySelector('cart-drawer');
            const drawerInner = drawer?.querySelector('.drawer__inner');
            const hasItems = drawerInner?.querySelectorAll('.cart-item, [data-cart-item]').length > 0;

            if (hasItems && drawer.classList.contains('is-empty')) {
              drawer.classList.remove('is-empty');
            }
          }, 50);
        }

      } catch (error) {
        console.error('Erro:', error);
        submitButton.querySelector('span').textContent = 'Erro ao adicionar';
      } finally {
        submitButton.disabled = false;
        submitButton.querySelector('span').textContent = submitButton.dataset.textAdd || 'Adicionar ao carrinho';
      }
    });

    // Inicializa√ß√£o
    updateVariants();
  });
<style>
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;700&display=swap');

  #buy-together-form {
      display: flex;
      flex-flow: wrap;
      align-items: center;
      gap: 60px;
      font-family: 'Montserrat', sans-serif;
  }

  .buy-together {
      background-color: #f9f9f9;
      border-radius: 1rem;
      padding-top: 10px;
      padding-bottom: 25px;
      font-family: 'Montserrat', sans-serif;
  }

  .buy-together h2 {
      font-size: 1.75rem;
      font-weight: 700;
      text-align: start;
      margin-bottom: 2rem;
      color: #67101A;
  }

  .suggested-products {
      display: flex;
      flex-wrap: wrap;
      justify-content: start;
      gap: 1rem;
      position: relative;
      font-family: 'Montserrat', sans-serif;
  }

  .suggested-product {
      background: #fff;
      border: 1px solid #eee;
      border-radius: 0.75rem;
      padding: 1rem;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      width: 200px;
      font-family: 'Montserrat', sans-serif;
  }

  .suggested-product img {
      max-width: 100%;
      height: auto;
      border-radius: 0.5rem;
      margin-bottom: 1rem;
  }

  .suggested-product h3 {
      font-size: 1.2rem;
      margin-bottom: 0.75rem;
      color: #111;
      font-weight: 500;
      font-family: 'Montserrat', sans-serif;
  }

  .product-price {
      font-size: 1.1rem;
      font-weight: 700;
      color: #67101A;
      margin-bottom: 1rem;
  }

  .plus-sign {
      font-size: 1.5rem;
      color: #67101A;
      margin: 0 1rem;
      align-self: center;
  }

  .product-form__option {
      margin-bottom: 0.75rem;
      text-align: left;
      font-family: 'Montserrat', sans-serif;
  }

  .product-form__option label {
      font-size: 11px;
      font-family: 'Montserrat', sans-serif;
  }

  .product-form__select {
      width: 100%;
      padding: 0.5rem;
      border-radius: 0.5rem;
      border: 1px solid #ccc;
      font-size: 1rem;
      font-family: 'Montserrat', sans-serif;
  }

  .product-form__buttons {
      margin-top: 2rem;
      text-align: center;
  }

  .total-price-wrapper {
      font-size: 1.25rem;
      font-weight: bold;
      margin-bottom: 1rem;
      color: #67101A;
      font-family: 'Montserrat', sans-serif;
  }

  .product-form__submit {
      min-width: 200px;
      background-color: #67101A;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 0.75rem 1.5rem;
      font-family: 'Montserrat', sans-serif;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.3s ease;
  }

  .product-form__submit:hover {
      background-color: #4e0c15;
  }

  .product-form__submit[disabled] {
      background-color: #aaa;
      cursor: not-allowed;
  }

  @media screen and (max-width: 640px) {
      #buy-together-form {
          display: block;
      }
      .suggested-products {
          align-items: center;
      }
      .suggested-product {
          width: 170px !important;
      }
      .plus-sign {
          display: none;
      }
  }
</style>


{% schema %}
{
    "name": "Compre Junto",
    "tag": "section",
    "settings": [],
    "presets": [
        {
        "name": "Compre Junto",
        "settings": {}
        }
    ]
}
{% endschema %}
